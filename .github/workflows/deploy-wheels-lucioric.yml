name: Build-lucioric

on: 
  push:
    #branches:
      #- lucioric
      # Release branches
      #- "[0-9]+.[0-9]+.X"

    tags:
      - '*'

  # Manual run
  workflow_dispatch:
env:
  PACKAGE_NAME: DelphiFMX-lucioric
  FORCE_VERSION: 0.0.17
jobs:
  #Empty distribution 
  sdist:
    name: Build ${{ matrix.architecture }} SOURCE on ${{ matrix.os }} for Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.9]
        include:
          - os: ubuntu-20.04
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}     
            
    - name: Build sdist
      run: python setup.py sdist
      
    - name: Save sdist
      uses: actions/upload-artifact@v2
      with:
        path: dist/*.tar.gz
        if-no-files-found: error
  #PyPI requires specific Linux versions tagged into wheel name, and linux_x86_64 is not accepted by a generalization issue
  #auditwheel won't repair our wheel tag because it doesn't accept a shared library within package files
  #so we manually bdist_wheel forcing a plat-name
  #The same for aarch64
  bdist_linux:
    name: Build ${{ matrix.architecture }} BINARY on ${{ matrix.os }} for Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8, 3.9]
        include:
          - os: ubuntu-20.04
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}     
            
    - name: Build bdist
      run: |        
        python -m pip install setuptools --upgrade
        python -m pip install wheel --upgrade                
        python setup.py bdist_wheel --plat-name=manylinux1_x86_64
      
    - name: Save sdist
      uses: actions/upload-artifact@v2
      with:
        path: dist/*.whl
        if-no-files-found: error
        
  bdist_aarch64:
    name: Build ${{ matrix.architecture }} SOURCE on ${{ matrix.os }} for Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:        
        os: [ubuntu-20.04]
        PYTHON:
          - {VERSION: "cp39-cp39"}
          
    steps:
    - name: Check out repository
      uses: actions/checkout@v2
      
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1.2.0
      with:
        platforms: arm64       

    - name: Build bdist
      uses: docker://quay.io/pypa/manylinux2014_aarch64
      with:
        args: | 
          bash -c "set -xe;
          /opt/python/${{ matrix.PYTHON.VERSION }}/bin/python -m pip install setuptools --upgrade
          /opt/python/${{ matrix.PYTHON.VERSION }}/bin/python -m pip install wheel --upgrade 
          /opt/python/${{ matrix.PYTHON.VERSION }}/bin/python setup.py bdist_wheel --plat-name=manylinux2014_aarch64"  
      
    - name: Save sdist
      uses: actions/upload-artifact@v2
      with:
        path: dist/*.whl
        if-no-files-found: error 
        
  wheels:
    name: Build ${{ matrix.arch }} WHEELS on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}    
    needs: [sdist]
    strategy:      
      #https://github.com/scikit-build/cmake-python-distributions/blob/master/.github/workflows/build.yml
      matrix:
        include:
          - os: windows-2019
            arch: "AMD64"
          - os: windows-2019
            arch: "x86"
          - os: macos-10.15
            arch: "x86_64"        

    steps:
      - name: "Checkout files"
        uses: actions/checkout@v2              

      - name: Build wheels
        uses: pypa/cibuildwheel@v2.1.1        
        env:
          CIBW_ARCHS: "${{ matrix.arch }}"                       

      - name: "Upload artifact"
        uses: actions/upload-artifact@v2
        with:
          name: artifact
          path: ./wheelhouse/*.whl
          if-no-files-found: error                                      
                              
  upload_pypi_test:
    name: Upload to PyPI test
    needs: [sdist, bdist_linux, bdist_aarch64, wheels]
    runs-on: ubuntu-latest
    steps:                       
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
          
      - name: Publish package to TestPyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: ${{ secrets.test_pypi_username }}
          password: ${{ secrets.test_pypi_password }}
          repository_url: https://test.pypi.org/legacy/    
          
  upload_pypi:
    name: Upload to PyPI
    needs: [sdist, bdist_linux, bdist_aarch64, wheels]
    runs-on: ubuntu-latest
    # upload to PyPI test on every tag starting with 'v'
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:                       
      - uses: actions/download-artifact@v2
        with:
          name: artifact
          path: dist
          
      - name: Publish package to PyPI      
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: ${{ secrets.pypi_username }}
          password: ${{ secrets.pypi_password }}               
