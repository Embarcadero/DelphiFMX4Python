[tox]
minversion = 3.4.0
envlist = py{36,37,38,39}-{mywindows32,mywindows64,mylinux64,mymacos64},py39-mylinuxaarch64,pypis
#envlist = py{36,37,38,39}-mylinux64,py39-mylinuxaarch64,pypis
tox_pyenv_fallback = False
recreate = True
requires = tox-envfile
           pip
           setuptools
           wheel
           twine

[testenv]
passenv = USERNAME
# environment will be skipped if regular expression does not match against the sys.platform string
#platform = mylinux64: linux64
#           mymacos64: darwin64
#           mywindows32: win32
#           mywindows64: win64
commands_pre =
    mylinux64: python -c 'print("Building on Linux64")'
    mylinuxaarch64: python -c 'print("Building on Linux-aarch64")'
    mymacos64: python -c 'print("Building on MacOS64")'
    mywindows32: python -c 'print("Building on Windows32")'
    mywindows64: python -c 'print("Building on Windows64")'

commands =
    mywindows32: python setup.py bdist_wheel --python-tag {envname} --plat-name win32
    mywindows64: python setup.py bdist_wheel --python-tag {envname} --plat-name win_amd64
    mylinux64: python setup.py bdist_wheel --python-tag {envname} --plat-name manylinux1_x86_64
    #mylinuxarm: python setup.py bdist_wheel --python-tag {envname} --plat-name manylinux2014_arm
    mylinuxaarch64: python setup.py bdist_wheel --python-tag {envname} --plat-name manylinux2014_aarch64
    mymacos64: python setup.py bdist_wheel --python-tag {envname} --plat-name macosx_10_9_x86_64
commands_post = python setup.py clean build

whitelist_externals =
    Remove-Item
    echo
    pwd
    ls
    del
deps = -rrequirements.txt

[testenv:pypis]
commands =
    #python setup.py sdist
    {envpython} -m twine upload --repository testpypi dist/*
#commands_post = python -m twine upload dist/
commands_post = python setup.py clean --all
deps =
      -rrequirements.txt
      twine
